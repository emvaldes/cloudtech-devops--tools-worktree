## This workflow will install Python dependencies, run tests and lint with a single version of Python
## For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Git Worktree Automation
on:

####----------------------------------------------------------------------------

  workflow_dispatch:

    name: Manual Deployment
    description: 'Triggering Manual Deployment'

    inputs:

      update-system:
        description: 'Updating the Operating System State'
        required: false
        default: true
    
      upgrade-system:
        description: 'Upgrading the Operating System State'
        required: false
        default: false
    
      python-version:
        description: 'Defines target Python Version'
        required: true
        default: '3.11'
    
      update-pip-version:
        description: 'Updating the current PIP Version'
        required: false
        default: true
    
      install-default-tools:
        description: 'Installing Default Toolset (DevOps)'
        required: false
        default: true
    
      install-custom-tools:
        description: 'Installing Custom Toolset (DevOps)'
        required: false
        default: false
    
      install-python-requirements:
        description: 'Installing Python Requirements'
        required: false
        default: false
    
      debuger-mode:
        description: 'Enabling Shell Debugger'
        required: false
        default: false
    
      verbose-mode:
        description: 'Enabling Verbosity'
        required: false
        default: false
    
      # logLevel:
      #   description: 'Log level'
      #   required: true
      #   default: 'warning'

      # tags:
      #   description: 'Git Worktree Automation'

####----------------------------------------------------------------------------

  push:

    branches: [ "master" ]
    paths:
      - '**'

####----------------------------------------------------------------------------

env:

  ## Secrets: ------------------------------------------------------------------

  ## Variables: ----------------------------------------------------------------

  ## Default/Custom toolset + Requirements
  CUSTOM_TOOLS:  ${{ vars.CUSTOM_TOOLS }}
  DEFAULT_TOOLS: ${{ vars.DEFAULT_TOOLS }}

  ## Python Version
  ## PYTHON_VERSION: ${{ vars.PYTHON_VERSION }}

  ## Python (Packages) Requirements
  PYTHON_REQUIREMENTS: ${{ vars.PYTHON_REQUIREMENTS }}
  
  ## Lintering Engine (e.g.: ruff, flake8, pylint, etc.)
  ## e.g.: ruff --format=github --target-version=py310 . ;
  LINTER_SYNTAX: ${{ vars.LINTER_SYNTAX }}

  ## Update/Upgrade -> Python + PIP
  UPDATE_PIP:     ${{ vars.UPDATE_PIP }}
  UPDATE_PYTHON:  ${{ vars.UPDATE_PYTHON }}

  ## Update/Upgrade -> System Components
  UPDATE_SYSTEM:  ${{ vars.UPDATE_SYSTEM }}
  UPGRADE_SYSTEM: ${{ vars.UPGRADE_SYSTEM }}

  ## Debugger & Verbosity Mode
  DEBUGER_MODE: ${{ vars.DEBUGER_MODE }}
  VERBOSE_MODE: ${{ vars.VERBOSE_MODE }}

####----------------------------------------------------------------------------

permissions:
  contents: read

jobs:

  worktree-automation:

    runs-on: ubuntu-latest

    strategy:
      matrix:

        python-version:   [ '3.11' ]
        pytest-scripts:   [ 'tests/' ]
        coverage-exclude: [ 'site-packages' ]

    steps:

####----------------------------------------------------------------------------
## Checkout Repository

      - name: checkout
        uses: actions/checkout@v3

####----------------------------------------------------------------------------
## Session Timestamp

      - name: Session Timestamp
        id: session-timestamp
        shell: bash
        run: |

          SESSION_TIMESTAMP="$(date +"%y%m%d%H%M%S")" ;
          echo "SESSION_TIMESTAMP=${SESSION_TIMESTAMP}" >> ${GITHUB_ENV} ;

        continue-on-error: false

####----------------------------------------------------------------------------
## Install Python Version

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
        continue-on-error: false

####----------------------------------------------------------------------------
## System Requirements

      - name: System Requirements
        uses: ./
        id: system-requirements
        with:

          debuger-mode: ${DEBUGER_MODE}
          verbose-mode: ${VERBOSE_MODE}

          update-system:  ${UPDATE_SYSTEM}
          upgrade-system: ${UPGRADE_SYSTEM}

          update-python-version: ${UPDATE_PYTHON}
          update-pip-version:    ${UPDATE_PIP}

          install-default-tools: ${DEFAULT_TOOLS}
          install-custom-tools:  ${CUSTOM_TOOLS}

          install-python-requirements: ${PYTHON_REQUIREMENTS}

        continue-on-error: false

####----------------------------------------------------------------------------
## Installed Packages

      - name: Installed Packages
        id: installed-packages
        shell: bash
        run: |

          lsb_release -a ;
          echo -e ;

          jq --version 2>/dev/null ;
          tree --version 2>/dev/null ;
          echo -e ;

          python --version 2>/dev/null ;
          pip --version 2>/dev/null ;
          echo -e ;

          pytest --version 2>/dev/null ;
          ruff --version 2>/dev/null ;
          coverage --version 2>/dev/null ;

        continue-on-error: false

####----------------------------------------------------------------------------
## Coverage Package Info

      - name: Coverage Package Info
        shell: bash
        run: |
          pip show coverage ;
        continue-on-error: false

####----------------------------------------------------------------------------
## Pytest Package Info

      - name: Pytest Package Info
        shell: bash
        run: |
          pip show pytest ;
        continue-on-error: false

####----------------------------------------------------------------------------
## Ruff Package Info

      - name: Ruff Package Info
        shell: bash
        run: |
          pip show ruff ;
        continue-on-error: false

####----------------------------------------------------------------------------
## Python Linting with Ruff

      - name: Linting with Ruff
        shell: bash
        run: |
          eval "${{ env.LINTER_SYNTAX }}" ;
        continue-on-error: false

####----------------------------------------------------------------------------
## Python -> Worktree Testing

      - name: PyTest -> Worktree Testing
        shell: bash
        run: |

          python -m pytest ${{ matrix.pytest-scripts }} --verbose ;

        continue-on-error: false

####----------------------------------------------------------------------------
## Coverage -> Worktree Testing

      - name: Coverage -> Worktree Testing
        shell: bash
        run: |

          coverage run -m pytest ${{ matrix.pytest-scripts }} ;

        continue-on-error: false

####----------------------------------------------------------------------------
## Coverage -> Worktree Report

      - name: Coverage -> Worktree Report
        shell: bash
        run: |

          coverage report | grep -v ${{ matrix.coverage-exclude }} ;

        continue-on-error: false

####----------------------------------------------------------------------------

# coverage run --help
# Usage: coverage run [options] <pyfile> [program options]

# Run a Python program, measuring code execution.

# Options:
#   -a, --append          Append coverage data to .coverage, otherwise it starts
#                         clean each time.
#   --branch              Measure branch coverage in addition to statement
#                         coverage.
#   --concurrency=LIBS    Properly measure code using a concurrency library.
#                         Valid values are: eventlet, gevent, greenlet,
#                         multiprocessing, thread, or a comma-list of them.
#   --context=LABEL       The context label to record for this coverage run.
#   --data-file=OUTFILE   Write the recorded coverage data to this file.
#                         Defaults to '.coverage'. [env: COVERAGE_FILE]
#   --include=PAT1,PAT2,...
#                         Include only files whose paths match one of these
#                         patterns. Accepts shell-style wildcards, which must be
#                         quoted.
#   -m, --module          <pyfile> is an importable Python module, not a script
#                         path, to be run as 'python -m' would run it.
#   --omit=PAT1,PAT2,...  Omit files whose paths match one of these patterns.
#                         Accepts shell-style wildcards, which must be quoted.
#   -L, --pylib           Measure coverage even inside the Python installed
#                         library, which isn't done by default.
#   -p, --parallel-mode   Append the machine name, process id and random number
#                         to the data file name to simplify collecting data from
#                         many processes.
#   --source=SRC1,SRC2,...
#                         A list of directories or importable names of code to
#                         measure.
#   --timid               Use a simpler but slower trace method. Try this if you
#                         get seemingly impossible results!
#   --debug=OPTS          Debug options, separated by commas. [env:
#                         COVERAGE_DEBUG]
#   -h, --help            Get help on this command.
#   --rcfile=RCFILE       Specify configuration file. By default '.coveragerc',
#                         'setup.cfg', 'tox.ini', and 'pyproject.toml' are
#                         tried. [env: COVERAGE_RCFILE]

# Full documentation is at https://coverage.readthedocs.io/en/7.2.7

####----------------------------------------------------------------------------
## Deprecated Workflow

      # - name: Lint with flake8
      #   run: |
      #     # stop the build if there are Python syntax errors or undefined names
      #     flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      #     # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
      #     flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      #   continue-on-error: false

####----------------------------------------------------------------------------
