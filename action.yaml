name: System Requirements
description: 'System Requirements (DevOps)'

####----------------------------------------------------------------------------

inputs:

  update-system:
    description: 'Updating the Operating System State'
    required: false
    default: true

  upgrade-system:
    description: 'Upgrading the Operating System State'
    required: false
    default: false

  update-python-version:
    description: 'Updating the current Python Version'
    required: false
    default: true

  update-pip-version:
    description: 'Updating the current PIP Version'
    required: false
    default: true

  install-default-tools:
    description: 'Installing Default Toolset (DevOps)'
    required: false
    default: false

  install-custom-tools:
    description: 'Installing Custom Toolset (DevOps)'
    required: false
    default: false

  install-python-requirements:
    description: 'Installing Python Requirements'
    required: false
    default: false

  debuger-mode:
    description: 'Enabling Shell Debugger'
    required: false
    default: false

  verbose-mode:
    description: 'Enabling Verbosity'
    required: false
    default: false

####----------------------------------------------------------------------------
## outputs:
####----------------------------------------------------------------------------

runs:

  using: "composite"
  steps:

    - name: System Release
      id: system-release
      shell: bash
      run: |

        ## Enabling Debuger-mode:
        [[ ${{ inputs.debuger-mode }} == true ]] && set -x ;

        ####--------------------------------------------------------------------
        completion="Skipping ...! " ;
        ####--------------------------------------------------------------------
        completion="Completed! " ;

        ####--------------------------------------------------------------------
        echo -e ;
        cat /etc/os-release ;
        export system_platform="$(
            cat /etc/os-release \
              | egrep '^NAME=".*$' \
              | sed -e 's|"||g' -e 's|^NAME=||' \
              | tr '[[:upper:]]' '[[:lower:]]'
          )" ;
        echo "SYSTEM_PLATFORM=${system_platform}" >> ${GITHUB_ENV} ;
        echo -e ;
        if [[ ${system_platform} == 'ubuntu' ]]; then
            echo -en "Installing LSB Release ... " ;
            sudo apt-get install --yes lsb-release 1>/dev/null ;
            echo -e "done." ;
            echo -en "Installing Dos2Unix ... " ;
            sudo apt-get install --yes dos2unix 1>/dev/null ;
            echo -e "done." ;
        fi;
        echo -e ;
        ####--------------------------------------------------------------------

    - name: Updating Operating System
      id: updating-operating-system
      shell: bash
      run: |

        ## Enabling Debuger-mode:
        [[ ${{ inputs.debuger-mode }} == true ]] && set -x ;

        ####--------------------------------------------------------------------
        function update_system () {
            local message="Updating Operating System (latest)" ;
            if [[ "${{ inputs.update-system }}" == true ]]; then
                    echo -en "\n${message} ..." ;
                    if [[ ${{ env.SYSTEM_PLATFORM }} == 'ubuntu' ]]; then
                        sudo apt-get update --yes 2>&1>/dev/null ;
                    fi;
                    echo -e " done." ;
              else  echo -e "\nSkip: ${message}! " ;
            fi ;
            return 0;
          }; ## alias update-system='update_system' ;
        update_system ;
        ####--------------------------------------------------------------------

    - name: Upgrading Operating System
      id: upgrading-operating-system
      shell: bash
      run: |

        ## Enabling Debuger-mode:
        [[ ${{ inputs.debuger-mode }} == true ]] && set -x ;

        ####--------------------------------------------------------------------
        function upgrade_system () {
            local message="Upgrading Operating System (latest)" ;
            if [[ "${{ inputs.upgrade-system }}" == true ]]; then
                    echo -en "\n${message} ..." ;
                    if [[ ${{ env.SYSTEM_PLATFORM }} == 'ubuntu' ]]; then
                      sudo apt-get upgrade --yes 2>&1>/dev/null ;
                    fi;
                    echo -e " done." ;
              else  echo -e "\nSkip: ${message}! " ;
            fi ;
            return 0;
          }; ## alias upgrade-system='upgrade_system' ;
        upgrade_system ;
        ####--------------------------------------------------------------------

    - name: Linking Python (Latest)
      id: linking-python3
      shell: bash
      run: |

        ## Enabling Debuger-mode:
        [[ ${{ inputs.debuger-mode }} == true ]] && set -x ;

        ####--------------------------------------------------------------------
        function linking_python3 () {
            local message="Linking Python (latest: 3.x)" ;
            if [[ "${{ inputs.update-python-version }}" == true ]]; then
                    echo -en "\n${message} ... " ;
                    cd /usr/bin ;
                    sudo ln -fs python3 python ;
                    python --version ;
              else  echo -e "\nSkip: ${message}! " ;
            fi ;
            return 0;
          }; ## alias linking-python3='linking_python3' ;
        linking_python3 ;
        echo -e ;
        ####--------------------------------------------------------------------

    - name: Python PIP3 (Latest)
      id: python-pip3
      shell: bash
      run: |

        ## Enabling Debuger-mode:
        [[ ${{ inputs.debuger-mode }} == true ]] && set -x ;

        ####--------------------------------------------------------------------
        function python_pip3 () {
            local message="Install/Upgrade python3-pip" ;
            if [[ "${{ inputs.update-pip-version }}" == true ]]; then
                    echo -en "\n${message} ... " ;
                    if [[ ${{ env.SYSTEM_PLATFORM }} == 'ubuntu' ]]; then
                        sudo apt install python3-pip --yes ;
                    fi;
                    python -m pip install --upgrade pip ;
                    pip --version ;
              else  echo -e "\nSkip: ${message}! " ;
            fi ;
            return 0;
          }; ## alias python-pip3='python_pip3' ;
        python_pip3 ;
        echo -e ;
        ####--------------------------------------------------------------------

    - name: Python Requirements
      id: python-requirements
      shell: bash
      run: |

        ## Enabling Debuger-mode:
        [[ ${{ inputs.debuger-mode }} == true ]] && set -x ;

        ####--------------------------------------------------------------------
        function python_requirements () {
            local message="Installing Python Requirements" ;
            local requirements_listing="/tmp/requirements.list" ;
            local requirements="${{ inputs.install-python-requirements }}" ;
            if [[ ( "${#requirements}" -gt 0 ) && ( "${requirements}" != false ) ]]; then
                    declare -a requirements=(
                        ${{ inputs.install-python-requirements }}
                      ) ;
                    if [[ "${#requirements[@]}" -gt 0 ]]; then
                      echo -e ${requirements[@]} \
                         | tr '[[:blank:]]' '\n' \
                         | sed '/^$/d' \
                         | sort -n | uniq - \
                         | dos2unix \
                      > "${requirements_listing}" ;
                      if [ -f "${requirements_listing}" ]; then
                              echo -e "\nRequirements:\n\n$( cat "${requirements_listing}" )" ;
                              if [[ $( wc -w "${requirements_listing}" | awk '{print $1}' ) -gt 0 ]]; then
                                      echo -e "\n${message} ..." ;
                                      pip install -r "${requirements_listing}" ;
                                else  echo -e "Warning: "${requirements_listing}" is empty! " ;
                              fi;
                        else  echo -e "Warning: "${requirements_listing}" was not found";
                      fi;
                    fi ;
              else  echo -e "\nSkip: ${message}! " ;
            fi;
            return 0;
          }; ## alias python-requirements='python_requirements' ;
        python_requirements ;
        echo -e ;
        ####--------------------------------------------------------------------

    - name: Installing Toolset
      id: installing-toolset
      shell: bash
      run: |

        ## Enabling Debuger-mode:
        [[ ${{ inputs.debuger-mode }} == true ]] && set -x ;

        ####--------------------------------------------------------------------
        function install_toolset () {
            local message="Install Toolset" ;
            local default="${{ inputs.install-default-tools }}" ;
            [[ ${default} == false ]] && default='' ;
            local custom="${{ inputs.install-custom-tools }}" ;
            [[ ${custom} == false ]] && custom='' ;
            local packages_listing="/tmp/packages.list" ;
            declare -a packages=( "${default}\n${custom}" ) ;
            if [[ ( "${#packages}" -gt 0 ) && ( "${packages}" != false ) ]]; then
                    echo -e ${packages[@]} \
                       | tr '[[:blank:]]\,\;' '\n' \
                       | sed '/^$/d' \
                       | sort -n | uniq - \
                       | dos2unix \
                    > "${packages_listing}" ;
                    if [ -f "${packages_listing}" ]; then
                            echo -e "\nPackages:\n\n$( cat "${packages_listing}" | sed '/^$/d' )" ;
                            if [[ $( wc -w "${packages_listing}" | awk '{print $1}' ) -gt 0 ]]; then
                                    declare -a packages=($( cat "${packages_listing}" )) ;
                                    if [[ ${{ env.SYSTEM_PLATFORM }} == 'ubuntu' ]]; then
                                      for package in ${packages[@]}; do
                                        sudo apt-get install --yes ${package} 1>/dev/null;
                                        apt info ${package} ;
                                      done ;
                                    fi ;
                              else  echo -e "Warning: "${packages_listing}" is empty! " ;
                            fi ;
                      else  echo -e "Warning: "${packages_listing}" was not found! " ;
                    fi ;
              else  echo -e "\nSkip: ${message}! " ;
            fi ;
            return 0;
          }; ## alias install-toolset='install_toolset' ;
        install_toolset ;
        ####--------------------------------------------------------------------

    - name: Display System Environment
      id: system-environment
      shell: bash
      run: |

        ## Enabling Debuger-mode:
        [[ ${{ inputs.debuger-mode }} == true ]] && set -x ;

        ####--------------------------------------------------------------------
        function system_environment () {
            if [[ "${{ inputs.verbose-mode }}" == true ]]; then
              echo -e "System Path:" ;
              echo $PATH | tr ':' '\n' ;
              echo -e "\nEnvironment variables:" ;
              env ;
            fi ;
            return 0;
          }; alias system-environment='system_environment' ;
        system_environment ;

        ####--------------------------------------------------------------------
        echo -e "\n${completion}\n" ;
        ####--------------------------------------------------------------------
