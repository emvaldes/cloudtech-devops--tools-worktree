name: System Requirements
description: 'System Requirements (DevOps)'

####----------------------------------------------------------------------------

inputs:

  update-system:
    description: 'Updating the Operating System State'
    required: false
    default: 'false'

  upgrade-system:
    description: 'Upgrading the Operating System State'
    required: false
    default: 'false'

  # update-python-version:
  #   description: 'Updating the current Python Version'
  #   required: false
  #   default: 'true'

  # update-pip-version:
  #   description: 'Updating the current PIP Version'
  #   required: false
  #   default: 'true'

  install-default-tools:
    description: 'Installing Default Toolset (DevOps)'
    required: false
    default: 'false'

  install-custom-tools:
    description: 'Installing Custom Toolset (DevOps)'
    required: false
    default: 'false'

  install-python-requirements:
    description: 'Installing Python Requirements'
    required: false
    default: 'false'

  storage-credentials:
    description: 'Pipeline Storage Credentials'
    required: false
    default: 'false'

  storage-passphrase:
    description: 'Pipeline Storage Passphrase'
    required: false
    default: 'false'

  application-parameters:
    description: 'Pipeline Application Parameters'
    required: false
    default: 'false'

  verbose-mode:
    description: 'Enabling Verbosity'
    required: false
    default: 'false'

  # debuger-mode:
  #   description: 'Enabling Shell Debugger'
  #   required: false
  #   default: false

####----------------------------------------------------------------------------
## outputs:
####----------------------------------------------------------------------------

runs:

  using: "composite"
  steps:

    - name: System Release
      id: system-release
      shell: bash
      run: |

        ####--------------------------------------------------------------------
        completion="Skipping ...! " ;
        ####--------------------------------------------------------------------

        [[ "${{ inputs.verbose-mode }}" != 'false' ]] && { set -x ; } ;
        echo -e "System Platform: ${{ env.SYSTEM_PLATFORM }}" ;

        ####--------------------------------------------------------------------
        echo -e ;

        cat /etc/os-release ;
        export system_platform="$(
            cat /etc/os-release \
              | egrep '^NAME=".*$' \
              | sed -e 's|"||g' -e 's|^NAME=||' \
              | tr '[[:upper:]]' '[[:lower:]]'
          )" ;
        echo "SYSTEM_PLATFORM=${system_platform}" >> $GITHUB_ENV ;
        echo -e ;
        if [[ ${system_platform} == 'ubuntu' ]]; then
            echo -en "Installing LSB Release ... " ;
            sudo apt-get install --yes lsb-release 1>/dev/null ;
            echo -e "done." ;
            echo -en "Installing Dos2Unix ... " ;
            sudo apt-get install --yes dos2unix 1>/dev/null ;
            echo -e "done." ;
        fi;
        echo -e ;
        ####--------------------------------------------------------------------

    - name: Updating Operating System
      id: updating-operating-system
      shell: bash
      run: |

        ####--------------------------------------------------------------------
        function update_system () {
            [[ "${{ inputs.verbose-mode }}" != 'false' ]] && { set -x ; } ;
            local message="Updating Operating System (latest)" ;
            if [[ "${{ inputs.update-system }}" == 'true' ]]; then
                    echo -en "\n${message} ..." ;
                    if [[ ${{ env.SYSTEM_PLATFORM }} == 'ubuntu' ]]; then
                        sudo apt-get update --yes 2>&1>/dev/null ;
                    fi;
                    echo -e " done." ;
              else  echo -e "\nSkip: ${message}! " ;
            fi ;
            return 0;
          }; alias update-system='update_system' ;
        ####--------------------------------------------------------------------
        [[ "${{ inputs.update-system }}" == 'true' ]] && {
          update_system 2>/dev/null ;
        } ;
        ####--------------------------------------------------------------------

    - name: Upgrading Operating System
      id: upgrading-operating-system
      shell: bash
      run: |

        ####--------------------------------------------------------------------
        function upgrade_system () {
            [[ "${{ inputs.verbose-mode }}" != 'false' ]] && { set -x ; } ;
            local message="Upgrading Operating System (latest)" ;
            if [[ "${{ inputs.upgrade-system }}" == 'true' ]]; then
                    echo -en "\n${message} ..." ;
                    if [[ ${{ env.SYSTEM_PLATFORM }} == 'ubuntu' ]]; then
                      sudo apt-get upgrade --yes 2>&1>/dev/null ;
                    fi;
                    echo -e " done." ;
              else  echo -e "\nSkip: ${message}! " ;
            fi ;
            return 0;
          }; alias upgrade-system='upgrade_system' ;
        # ###--------------------------------------------------------------------
        # [[ "${{ inputs.upgrade-system }}" == 'true' ]] && {
        #   upgrade_system 2>/dev/null ;
        # } ;
        # ####--------------------------------------------------------------------

    - name: Linking Python (Latest)
      id: linking-python3
      shell: bash
      run: |

        ####--------------------------------------------------------------------
        function linking_python3 () {
            [[ "${{ inputs.verbose-mode }}" != 'false' ]] && { set -x ; } ;
            local message="Linking Python (latest: 3.x)" ;
            # if [[ "${{ inputs.update-python-version }}" == 'true' ]]; then
                    echo -en "\n${message} ... " ;
                    cd /usr/bin ;
                    sudo ln -fs python3 python ;
                    python --version ;
            #   else  echo -e "\nSkip: ${message}! " ;
            # fi ;
            return 0;
          }; alias linking-python3='linking_python3' ;
        ####--------------------------------------------------------------------
        # [[ "${{ inputs.update-python-version }}" == 'true' ]] && {
          linking_python3 2>/dev/null ;
          echo -e ;
        # };
        ####--------------------------------------------------------------------

    - name: Python PIP3 (Latest)
      id: python-pip3
      shell: bash
      run: |

        ####--------------------------------------------------------------------
        function python_pip3 () {
            [[ "${{ inputs.verbose-mode }}" != 'false' ]] && { set -x ; } ;
            local message="Install/Upgrade python3-pip" ;
            # if [[ "${{ inputs.update-pip-version }}" == 'true' ]]; then
                    echo -en "\n${message} ... " ;
                    if [[ ${{ env.SYSTEM_PLATFORM }} == 'ubuntu' ]]; then
                        sudo apt install python3-pip --yes ;
                    fi;
                    python -m pip install --upgrade pip ;
                    pip --version ;
            #   else  echo -e "\nSkip: ${message}! " ;
            # fi ;
            return 0;
          }; alias python-pip3='python_pip3' ;
        ####--------------------------------------------------------------------
        # [[ "${{ inputs.update-pip-version }}" == 'true' ]] && {
          python_pip3 2>/dev/null ;
          echo -e ;
        # } ;
        ####--------------------------------------------------------------------

    - name: Python Requirements
      id: python-requirements
      shell: bash
      run: |

        ####--------------------------------------------------------------------
        function python_requirements () {
            [[ "${{ inputs.verbose-mode }}" != 'false' ]] && { set -x ; } ;
            local message="Installing Python Requirements" ;
            local requirements_listing="/tmp/requirements.list" ;
            local requirements="${{ inputs.install-python-requirements }}" ;
            if [[ ( "${#requirements}" -gt 0 ) && ( "${requirements}" != 'false' ) ]]; then
                    declare -a requirements=(
                        ${{ inputs.install-python-requirements }}
                      ) ;
                    if [[ "${#requirements[@]}" -gt 0 ]]; then
                      echo -e ${requirements[@]} \
                         | tr '[[:blank:]]' '\n' \
                         | sed '/^$/d' \
                         | sort -n | uniq - \
                         | dos2unix \
                      > "${requirements_listing}" ;
                      if [ -f "${requirements_listing}" ]; then
                              echo -e "\nRequirements:\n\n$( cat "${requirements_listing}" )" ;
                              if [[ $( wc -w "${requirements_listing}" | awk '{print $1}' ) -gt 0 ]]; then
                                      echo -e "\n${message} ..." ;
                                      pip install -r "${requirements_listing}" ;
                                else  echo -e "Warning: "${requirements_listing}" is empty! " ;
                              fi;
                        else  echo -e "Warning: "${requirements_listing}" was not found";
                      fi;
                    fi ;
              else  echo -e "\nSkip: ${message}! " ;
            fi;
            return 0;
          }; ## alias python-requirements='python_requirements' ;
        ####--------------------------------------------------------------------
        requirements="${{ inputs.install-python-requirements }}" ;
        [[ ( "${#requirements}" -gt 0 ) && ( "${requirements}" != 'false' ) ]] && {
          python_requirements 2>/dev/null ;
          echo -e ;
        } ;
        ####--------------------------------------------------------------------

    - name: Installing Toolset
      id: installing-toolset
      shell: bash
      run: |

        ####--------------------------------------------------------------------
        function install_toolset () {
            [[ "${{ inputs.verbose-mode }}" != 'false' ]] && { set -x ; } ;
            local message="Install Toolset" ;
            local default='' ;
            [[ "${{ inputs.install-default-tools }}" != 'false' ]] && {
              default="${{ inputs.install-default-tools }}" ;
            } ;
            local custom='' ;
            [[ "${{ inputs.install-custom-tools }}" != 'false' ]] && {
              custom="${{ inputs.install-custom-tools }}" ;
            } ;
            local packages_listing="/tmp/packages.list" ;
            declare -a packages=( "${default}\n${custom}" ) ;
            local valid_packages="$(
              echo -e "${packages[*]}" \
                 | tr '\n' ' ' \
                 | sed -e 's|\([[:blank:]]\)\{1,\}| |g'
            )" ;
            if [[ ( "${#packages[@]}" -gt 0 ) && ( "${valid_packages}" != 'false' ) ]]; then
                    echo -e ${packages[@]} \
                       | tr '[[:blank:]]\,\;' '\n' \
                       | sed '/^$/d' \
                       | sort -n | uniq - \
                       | dos2unix \
                    > "${packages_listing}" ;
                    if [ -f "${packages_listing}" ]; then
                            echo -e "\nPackages:\n\n$( cat "${packages_listing}" | sed '/^$/d' )" ;
                            if [[ $( wc -w "${packages_listing}" | awk '{print $1}' ) -gt 0 ]]; then
                                    declare -a packages=($( cat "${packages_listing}" )) ;
                                    if [[ ${{ env.SYSTEM_PLATFORM }} == 'ubuntu' ]]; then
                                      for package in ${packages[@]}; do
                                        sudo apt-get install --yes ${package} 1>/dev/null;
                                        apt info ${package} ;
                                      done ;
                                    fi ;
                              else  echo -e "Warning: "${packages_listing}" is empty! " ;
                            fi ;
                      else  echo -e "Warning: "${packages_listing}" was not found! " ;
                    fi ;
              else  echo -e "\nSkip: ${message}! " ;
            fi ;
            return 0;
          }; ## alias install-toolset='install_toolset' ;
        ####--------------------------------------------------------------------
        default="${{ inputs.install-default-tools }}" ;
        [[ ( "${#default}" -gt 0 ) && ( "${default}" != 'false' ) ]] && {
          install_toolset 2>/dev/null ;
        } ;
        ####--------------------------------------------------------------------

    - name: Execute Application Pipeline
      id: application-pipeline
      shell: bash
      run: |

        ####--------------------------------------------------------------------
        function deploy_application () {
            [[ "${{ inputs.verbose-mode }}" != 'false' ]] && { set -x ; } ;
            local parameters="${{ env.APPLICATION_PARAMETERS }}" ;
            local sanitized='' ;
            local message='' ;
            if [[ ${parameters} =~ 'project.py' ]]; then
              sanitized="$(
                echo -e "${parameters}" \
                   | sed -e 's|project.py||g' -e 's|\([[:blank:]]\)\{1,\}| |g'
              )" ;
              parameters="${sanitized}" ;
            fi ;
            message="Executing Application Pipeline (requirements)" ;
            if [[ ( ${#credentials} -gt 0 ) && ( ${#passphrase} -gt 0 ) ]]; then
              if [[ ${{ env.SYSTEM_PLATFORM }} == 'ubuntu' ]]; then
                if [[ ${parameters} =~ '--enable sharepoint' ]]; then
                  export SharePoint_DevNetOpsEngineers_Credentials="${credentials}" ;
                  export SharePoint_DevNetOpsEngineers_Passphrase="${passphrase}" ;
                  decryption="--pass ${SharePoint_DevNetOpsEngineers_Passphrase}" ;
                  sanitized="$(
                    echo -e "${parameters}" \
                      | sed -e "s|\(\-\-enable sharepoint \)|\1 ${decryption} |g" \
                      | sed -e 's|\-\-params ||g' \
                      | sed -e 's|\;||g' -e 's|\([[:blank:]]\)\{1,\}$||'
                  )" ;
                  parameters="${sanitized}" ;
                fi ;
                rm -rf ${GITHUB_WORKSPACE}/core/_git 2>&1>/dev/null ;
                sudo chmod -R g+w ${GITHUB_WORKSPACE}
                # tree ${GITHUB_WORKSPACE} ;
                if [[ "${{ inputs.verbose-mode }}" != 'false' ]]; then
                  echo -e "Initializing Project Configuration" ;
                fi ;
                python ${GITHUB_WORKSPACE}/project.py --params --json ;
                if [[ "${{ inputs.verbose-mode }}" != 'false' ]]; then
                  echo -e "Listing Storage Configurations" ;
                  cat ${GITHUB_WORKSPACE}/sharepoint.json ;
                fi ;
                echo -e "Deploying Application Pipeline:\n${parameters}" ;
                python ${GITHUB_WORKSPACE}/project.py --params ${parameters} ;
              fi ;
            fi ;
            return 0;
          }; alias deploy-application='deploy_application' ;
        ####--------------------------------------------------------------------
        export credentials="${{ env.SHAREPOINT_CREDENTIALS }}" ;
        export passphrase="${{ env.SHAREPOINT_PASSPHRASE }}" ;
        if [[
              ( ${#credentials} -gt 0 ) &&
              ( ${#passphrase} -gt 0 )
            ]]; then
          deploy_application 2>/dev/null ;
        fi ;
        ####--------------------------------------------------------------------

    - name: Display System Environment
      id: system-environment
      shell: bash
      run: |

        ####--------------------------------------------------------------------
        function system_environment () {
            if [[ "${{ env.VERBOSE_MODE }}" == 'true' ]]; then
              set -x ;
              echo -e "System Path:" ;
              echo $PATH | tr ':' '\n' 2>/dev/null ;
              echo -e "\nEnvironment variables:" ;
              env 2>/dev/null ;
            fi ;
            return 0;
          }; alias system-environment='system_environment' ;
        # ####--------------------------------------------------------------------
        # [[ "${{ env.VERBOSE_MODE }}" == 'true' ]] && {
        #   system_environment 2>/dev/null ;
        # } ;
        # ####--------------------------------------------------------------------

        # completion="Completed! " ;
        # echo -e "\n${completion}\n" ;

        ####--------------------------------------------------------------------
